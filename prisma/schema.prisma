// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  foods Food[]
}

model RiskLevel {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  foods Food[]
}

model ConsumeFrequency {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  frequency String @unique
  foods     Food[]
}

model SeverityScale {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String
  icon        String
  symptoms    Symptom[]
}

model Symptom {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String        @unique
  severityScale   SeverityScale @relation(fields: [severityScaleId], references: [id])
  severityScaleId String        @db.ObjectId
  foods           Food[]        @relation(fields: [foodIds], references: [id])
  foodIds         String[]      @db.ObjectId
}

model Food {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  name               String            @unique
  description        String
  suggestions        String[]
  symptoms           Symptom[]         @relation(fields: [symptomsIds], references: [id])
  symptomsIds        String[]          @db.ObjectId
  consumeFrequency   ConsumeFrequency? @relation(fields: [consumeFrequencyId], references: [id])
  consumeFrequencyId String?           @db.ObjectId
  category           Category          @relation(fields: [categoryId], references: [id])
  categoryId         String            @db.ObjectId
  riskLevel          RiskLevel         @relation(fields: [riskLevelId], references: [id])
  riskLevelId        String            @db.ObjectId
  isEdible           Edible            @default(NO)
}

enum Edible {
  YES
  NO
}
